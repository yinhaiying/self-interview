一.this的指向问题
  1.this的指向是在函数调用时确定,而不是在函数定义时确定。
  2.this的指向问题大约有以下几种情况
    1.当函数作为对象的方法被调用时,this就会指向该对象
    2.作为普通函数被调用,this指向window(非严格模式)
    3.通过new调用，this指向生成的对象
    4.apply,call。修改this指向后，this指向修改后的对象。
  特别的:对于箭头函数的指向:箭头函数中的this绑定，看的是this所在的函数，定义在哪个对象下
  就绑定哪个对象。
二.说一下什么是闭包，为什么要使用闭包(使用闭包饿的场合)，使用闭包有什么危害？
  闭包就是函数内嵌套函数，且外部函数使用了内部函数的变量或者参数。因此，形成闭包的两个必要条件是：
      1.函数嵌套函数
      2.外部函数使用了内部函数的变量或者参数
  变量的使用场合:
      1.私有化变量:如果我们想要定义变量不能被外界访问，只能够通过内部自己定义的方法进行访问。那么就可以使用闭包。
      对于外部函数定义的变量，函数外是无法访问的，而内部函数是可以访问的，因此这个变量就相当于私有化了。
      2.模块化开发，防止污染全局变量。闭包内部定义的变量，如果跟外面定义的变量同名了，那么也不会对外面的变量
      产生影响。因为根据作用域链的查找顺序，会先从函数内部查找，如果内部有就不会往外查找了。这样就避免了对外部变量的
      影响。
  闭包的缺陷：
    由于使用闭包变量会始终保存在内存中，这样的话会增大内存的使用量，使用不当会造成内存泄漏
    如果不是因为某些特殊任务而需要闭包，在没有必要的情况下，在其他函数中创建函数是不明智的。
三.说一下作用域和作用域链
  作用域:是指函数和变量的能够被访问的范围。通常来说分为全局作用域和局部作用域。
  全局作用域定义的变量和函数在任何地方都可以被访问。局部作用域定义的变量和函数只能够在局部范围内被访问
  作用域链：是定义一条变量被有序访问的规则。通常来说局部作用域能够访问全局范围内的变量，但是全局无法访问局部的变量
四.说一下原型(对象)和原型链
  函数类型的对象具有内置的属性prototype,这个属性指向一个对象，这个对象就是原型对象。
  原型链:每个对象都有自己的原型对象，原型对象又有自己的原型，这些原型组成原型链，直到某个对象的原型为null为止.