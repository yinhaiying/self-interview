对前端开发工程师是如何理解的？它的未来的前景是怎样的？
链接：https://www.nowcoder.com/questionTerminal/e1cd643d782b4494ab1e60610817a464
来源：牛客网

前端界面工程师是跟用户接触最近的一个职位，对于用户来说他不会去考虑你这个产品内部是怎么实现的？
他最直接的印象是他能够看到的界面和他能够进行的按钮等操作。前端界面工程师要做的就是呈现给用户这些信息，
因此我们前端工程师最终呈现的效果直接影响到用户的评价，用户评价的好坏影响到产品的好坏。因此前端的重要性
是毋庸置疑的。



前景：
从技术上来说：现在互联网行业发展的越来越快，技术更新非常快，前端技术时刻更新，
比如说我们现在有了Node.js能够完成服务器的工作。
我们也需要不断地区更新技术，要用更多的轻量型代码完成更复杂的工作。
另外一方面从工作角度来讲：
前端开发并不仅仅是设计到前端页面的实现，更多的需要和UI，产品经理等合作才能打造出最好的
产品。
UI、产品经理、前端工程师要紧密配合，力求引领时代而不是跟随时代。
一个好的前端界面工程师应该是一个能真正了解客户的人。



1. 前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好
2. 参与项目，快速高质量完成实现效果图，精确到1px；
3. 与团队成员，UI设计，产品经理的沟通；
4. 做好的页面结构，页面重构和用户体验；
5. 处理hack，兼容、写出优美的代码格式；
6. 针对服务器的优化、拥抱最新前端技术。



最近接触到的一些新的技术：
前几天了解到一个可以在google下进行测试的框架cypress。能够提前模拟用户的操作
这样的话，一方面可以用来检测代码是否正确，另外一方面可以用来检测功能是否按照
我们设计的来实现。比如某些接口需要特定操作才可以请求到，
，这个时候就可以利用Cypress来模拟用户操作了，一方面可以测试代码是否正确，
并且还能看到ui相应变化是否符合预期。同样，测试 fail 了也可以直接调试。


前端的性能优化？
内容优化：
(1)减少HTTP请求数:这条策略是最重要最有效的，因为一个完整的请求要经过DNS寻址，
与服务器建立连接，发送数据，等待服务器响应，接收数据这样一个消耗时间成本和资源成本的复杂的过程。
常见方法：合并多个CSS文件和js文件，利用CSS Sprites整合图像，
  Inline Images(使用 data：URL scheme在实际的页面嵌入图像数据 )，合理设置HTTP缓存等。
(2)减少DNS查找
(3)避免重定向
(4)使用Ajax缓存
(5)延迟加载组件,预加载组件
(6)减少DOM元素数量:页面中存在大量DOM元素,会导致javascript遍历DOM的效率变慢。
(7)最小化iframe的数量：iframes 提供了一个简单的方式把一个网站的内容嵌入到另一个网站中。但其创建速度比其他包括JavaScript和CSS的DOM元素的创建慢了1-2个数量级。
(8)避免404：HTTP请求时间消耗是很大的，因此使用HTTP请求来获得一个没有用处的响应（例如404没有找到页面）是完全没有必要的，它只会降低用户体验而不会有一点好处。

CSS角度进行优化：
(1)将CSS代码放在HTML页面的顶部。
 放在顶部能够优化的原因：当浏览器从上到下一遍下载html生成dom tree，
 一边根据浏览器默认以及现有css生成render tree来渲染页面。当遇到新的css的时候下载
 并结合现有css重新生成render tree。则刚才的渲染功能就全废了。
 当我们把所有css放在页面的顶部，就没有重新渲染的过程了。
(2)避免使用CSS表达式
(3)使用<link>来代替@import。
 使用@import方法引用css文件可能会带来一些影响页面加载速度的问题。
 比如导致文件按顺序加载（一个加载完成后才会加载另一个），无法并行加载；
js角度进行优化：
(1)将JavaScript脚本放在页面的底部。
(2)将JavaScript和CSS作为外部文件来引用：在实际应用中使用外部文件可以提高页面速度，
   因为JavaScript和CSS文件都能在浏览器中产生缓存。
(3)缩小JavaScript和CSS
(4)删除重复的脚本
(5)最小化DOM的访问：使用JavaScript访问DOM元素比较慢。
(6)开发智能的事件处理程序
(7)javascript代码注意：谨慎使用with,避免使用eval Function函数,减少作用域链查找。
图片角度优化：
(1)优化图片大小
(2)通过CSS Sprites优化图片
(3)不要在HTML中使用缩放图片
(4)favicon.ico要小而且可缓存













说一说你对HTTP协议的理解？
HTTP协议是用于客户端和服务端之间的通信，浏览器向服务器请求数据和服务器向浏览器发送数据
实现客户端和服务器端之间的通信。

1、简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。
每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。

2、灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。

3.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，
并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。

4.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。
缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。
另一方面，在服务器不需要先前信息时它的应答就较快。

无状态 ->cookie
方法 ->get和post的区别
